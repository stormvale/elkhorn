name: api-restaurants

on:
  push:
    branches: [ master ]
    paths: [ 'src/services/Restaurants.Api/**', 'src/ServiceDefaults/**', 'src/Contracts/Restaurants/**' ]
  pull_request:
    branches: [ master ]
    paths: [ 'src/services/Restaurants.Api/**', 'src/ServiceDefaults/**', 'src/Contracts/Restaurants/**' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write # needed to publish image to ghcr

env:
  project_name: Restaurants.Api

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Restore dependencies
        run: dotnet restore src/services/${{ env.project_name }}

      - name: Build project
        run: dotnet build src/services/${{ env.project_name }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test test/unit/${{ env.project_name }}.Tests --configuration Release --collect:"XPlat Code Coverage" --logger trx

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ always() }} # run even if tests fail
        with:
          name: test-results-${{ env.project_name }}
          path: |
            test/**/TestResults/*.trx
            test/**/TestResults/**/coverage.cobertura.xml
          retention-days: 1

  publish-results:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'pull_request'

    permissions:
        contents: read
        issues: read
        checks: write
        pull-requests: write

    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ env.project_name }}
          path: TestResults/${{ env.project_name }}

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: (!cancelled())
        with:
          files: |
            TestResults/**/*.trx

      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: file
          thresholds: "50 70"

      - name: Publish coverage report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

  docker-build-tag-push:
    needs: build-test
    runs-on: ubuntu-latest

    permissions:
        contents: read
        packages: write # needed to publish image to ghcr

    outputs:
      image_name: ${{ steps.get-build-name.outputs.image_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # use github references & events to generate metadata
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/stormvale/${{ env.project_name }} # docker action will handle the lowercase stuff
          flavor: latest=auto
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          push: true # should we always push?
          file: src/services/${{ env.project_name }}/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 'Set output: imageName'
        id: get-build-name
        run: |
          imageName=${{ fromJSON(steps.build-push.outputs.metadata)['image.name'] }}
          echo "image_name=${imageName}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-tag-push]
    environment: ${{ matrix.environment }}

    # only run on pushes to master (ie. merges into master)
    if: (github.event_name == 'push') && (github.ref == 'refs/heads/master')

    env:
      app_name_template: ca-restaurants-elkhorn-{0}-wus2

    permissions:
      id-token: write # needed for az login
      pull-requests: write

    strategy:
      matrix:
        environment: [development] # production
        include:
          - environment: development
            env_short: dev
          # - environment: production
          #   env_short: prod

    steps:
      - name: Show deploy info
        run: echo deploying '${{ needs.docker-build-tag-push.outputs.image_name }}' to '${{ format(env.app_name_template, matrix.env_short) }}'

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Az account show
        run: az account show

      # - name: 'Deploy image to Azure Web Apps'
      #  uses: azure/webapps-deploy@v3
      #  with:
      #    app-name: ${{ format(env.web_app_name, matrix.env_short) }}
      #    images: ${{ needs.docker-build-tag-push.outputs.image_name }}
          
      - name: Deploy to Azure Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          containerAppName: ${{ format(env.app_name_template, matrix.env_short) }}
          resourceGroup: ${{ format('rg-elkhorn-{0}-wus2', matrix.env_short) }}
          imageToDeploy: ${{ needs.docker-build-tag-push.outputs.image_name }}

      - name: Update PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ℹ️ New image **${{ needs.docker-build-tag-push.outputs.image_name }}** was deployed to web app **${{ format(env.app_name_template, matrix.env_short) }}**'
            })