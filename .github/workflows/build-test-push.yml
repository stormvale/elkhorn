on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [ API.Weather ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Restore dependencies
        run: dotnet restore src/${{ matrix.project }}

      - name: Build project
        run: dotnet build src/${{ matrix.project }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test test/unit/${{ matrix.project }}.Tests --configuration Release --collect:"XPlat Code Coverage" --logger trx

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ always() }} # run even if tests fail
        with:
          name: test-results-${{ matrix.project }}
          path: |
            test/**/TestResults/*.trx
            test/**/TestResults/**/coverage.cobertura.xml
          retention-days: 1

  publish-results:
    name: Publish Results
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'pull_request'

    permissions:
        contents: read
        issues: read
        checks: write
        pull-requests: write

    steps:
      - name: Download test results - API.Weather
        uses: actions/download-artifact@v4
        with:
          name: test-results-API.Weather
          path: TestResults/API.Weather

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: (!cancelled())
        with:
          files: |
            TestResults/**/*.trx

      # [requires Linux runner]
      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: file
          thresholds: "50 70"

      - name: Publish coverage report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [ API.Weather ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Image Name
        id: image_name
        run: |
          PROJECT_LOWERCASE=$(echo ${{ matrix.project }} | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${{ secrets.ACR_NAME }}.azurecr.io/$PROJECT_LOWERCASE"
          echo "{image_name}={$IMAGE_NAME}" >> $GITHUB_OUTPUT

      # - name: Set lower case project name
      #   run: echo PROJECT_LOWERCASE=$(echo ${{ matrix.project }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

        # ${{ secrets.ACR_NAME }}.azurecr.io/$PROJECT_LOWERCASE

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image_name.outputs.image_name }}:${{ github.sha }}
            ${{ steps.image_name.outputs.image_name }}:latest
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: src/${{ matrix.project }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    outputs:
      image_name: ${{ steps.image_name.outputs.image_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ docker-build-push ]

    strategy:
      matrix:
        environment: [development, production]

    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Az account show'
        run: az account show

      # - name: Deploy container to Azure Web App
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: '<WEB_APP_NAME>'
      #     images: '${{ secrets.ACR_NAME }}.azurecr.io/${{ needs.docker-build-push.outputs.image_name}}:latest'
