name: api-gateway

on: 
  push:
    branches: [ master ]
    paths: [ 'src/Gateway.Api/**', 'src/ServiceDefaults/**' ]
  pull_request:
    branches: [ master ]
    paths: [ 'src/Gateway.Api/**', 'src/ServiceDefaults/**' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write # needed to publish image to ghcr

env:
  project_name: Gateway.Api
  web_app_name: app-gateway-elkhorn-{0}-wus2

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Restore dependencies
        run: dotnet restore src/${{ env.project_name }}

      - name: Build project
        run: dotnet build src/${{ env.project_name }} --configuration Release --no-restore

  docker-build-tag-push:
    needs: build-test
    runs-on: ubuntu-latest

    permissions:
        contents: read
        packages: write # needed to publish image to ghcr

    outputs:
      image_name: ${{ steps.get-build-name.outputs.image_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # use github references & events to generate metadata
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/stormvale/${{ env.project_name }} # docker action will handle the lowercase stuff
          flavor: latest=auto
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          push: true # should we always push?
          file: src/${{ env.project_name }}/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 'Set output: imageName'
        id: get-build-name
        run: |
          imageName=${{ fromJSON(steps.build-push.outputs.metadata)['image.name'] }}
          echo "image_name=${imageName}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-tag-push]
    environment: ${{ matrix.environment }}

    # only run on pushes to master (ie. merges into master)
    if: (github.event_name == 'push') && (github.ref == 'refs/heads/master')

    permissions:
      id-token: write # needed for az login
      pull-requests: write

    strategy:
      matrix:
        environment: [development] # production
        include:
          - environment: development
            env_short: dev
          # - environment: production
          #   env_short: prod

    steps:
      - name: Show deploy info
        run: echo deploying '${{ needs.docker-build-tag-push.outputs.image_name }}' to '${{ format(env.web_app_name, matrix.env_short) }}'

      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: 'Az account show'
        run: az account show

      - name: 'Deploy image to Azure Web apps'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ format(env.web_app_name, matrix.env_short) }}
          images: ${{ needs.docker-build-tag-push.outputs.image_name }}

      - name: Update PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ℹ️ New image **${{ needs.docker-build-tag-push.outputs.image_name }}** was deployed to web app **${{ format(env.web_app_name, matrix.env_short) }}**'
            })