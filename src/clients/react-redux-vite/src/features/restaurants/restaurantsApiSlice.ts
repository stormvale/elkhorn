import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

export interface Modifier {
  name: string;
  priceAdjustment: number;
}

export interface MenuItem {
  id: string;
  name: string;
  price: number;
  availableModifiers: Modifier[];
}

export interface Restaurant {
  id: string;
  name: string;
  contact: { name: string; email: string; phone: string | null; type: string };
  address: { street: string; city: string; postCode: string; state: string };
  menu: MenuItem[];
}

// Define a service using a base URL and expected endpoints
export const restaurantsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_RESTAURANTS_API_URL }),
  reducerPath: "restaurantsApi",

  // Tag types are used for caching and invalidation.
  tagTypes: ["Restaurants"],
  
  endpoints: builder => ({
    getRestaurants: builder.query<Restaurant[], void>({
      query: () => "/",
      providesTags: ['Restaurants'],
    }),
    getRestaurantById: builder.query<Restaurant, string>({
      query: (id) => `/${id}`,
      providesTags: (_result, _error, id) => [{ type: "Restaurants", id }],
    }),
    addRestaurants: builder.mutation<Restaurant, Partial<Restaurant>>({
      query: (body) => ({
        url: '/',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Restaurants'],
    })
  })
})

// Hooks are auto-generated by RTK-Query (if its not working, check you have the correct import)
export const { useGetRestaurantsQuery, useGetRestaurantByIdQuery } = restaurantsApiSlice